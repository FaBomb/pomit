{"ast":null,"code":"import consumer from \"./consumer\";\nconsumer.subscriptions.create(\"RoomChannel\", {\n  connected: function connected() {// Called when the subscription is ready for use on the server\n  },\n  disconnected: function disconnected() {// Called when the subscription has been terminated by the server\n  },\n  received: function received(data) {\n    return alert(data['message']); // Called when there's incoming data on the websocket for this channel\n  },\n  speak: function speak(message) {\n    return this.perform('speak', {\n      message: message\n    });\n  }\n});\n$(document).on('keypress', '[data-behavior~=room_speaker]', function (event) {\n  if (event.keyCode === 13) {\n    chatChannel.speak(event.target.value);\n    event.target.value = '';\n    return event.preventDefault();\n  }\n});","map":{"version":3,"sources":["C:/my_work/portfolio/work/pomit/app/javascript/channels/room_channel.js"],"names":["consumer","subscriptions","create","connected","disconnected","received","data","alert","speak","message","perform","$","document","on","event","keyCode","chatChannel","target","value","preventDefault"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEAA,QAAQ,CAACC,aAAT,CAAuBC,MAAvB,CAA8B,aAA9B,EAA6C;AAC3CC,EAAAA,SAD2C,uBAC/B,CACV;AACD,GAH0C;AAK3CC,EAAAA,YAL2C,0BAK5B,CACb;AACD,GAP0C;AAS3CC,EAAAA,QAT2C,oBASlCC,IATkC,EAS5B;AACb,WAAOC,KAAK,CAACD,IAAI,CAAC,SAAD,CAAL,CAAZ,CADa,CAEb;AACD,GAZ0C;AAc3CE,EAAAA,KAAK,EAAE,eAASC,OAAT,EAAkB;AACvB,WAAO,KAAKC,OAAL,CAAa,OAAb,EAAqB;AAC1BD,MAAAA,OAAO,EAACA;AADkB,KAArB,CAAP;AAGD;AAlB0C,CAA7C;AAoBAE,CAAC,CAACC,QAAD,CAAD,CAAYC,EAAZ,CAAe,UAAf,EAA2B,+BAA3B,EAA4D,UAASC,KAAT,EAAgB;AAC1E,MAAIA,KAAK,CAACC,OAAN,KAAkB,EAAtB,EAA0B;AACxBC,IAAAA,WAAW,CAACR,KAAZ,CAAkBM,KAAK,CAACG,MAAN,CAAaC,KAA/B;AACAJ,IAAAA,KAAK,CAACG,MAAN,CAAaC,KAAb,GAAqB,EAArB;AACA,WAAOJ,KAAK,CAACK,cAAN,EAAP;AACD;AACF,CAND","sourcesContent":["import consumer from \"./consumer\"\n\nconsumer.subscriptions.create(\"RoomChannel\", {\n  connected() {\n    // Called when the subscription is ready for use on the server\n  },\n\n  disconnected() {\n    // Called when the subscription has been terminated by the server\n  },\n\n  received(data) {\n    return alert(data['message']);\n    // Called when there's incoming data on the websocket for this channel\n  },\n\n  speak: function(message) {\n    return this.perform('speak',{\n      message:message\n    });\n  }\n});\n$(document).on('keypress', '[data-behavior~=room_speaker]', function(event) {\n  if (event.keyCode === 13) {\n    chatChannel.speak(event.target.value);\n    event.target.value = '';\n    return event.preventDefault();\n  }\n});\n"]},"metadata":{},"sourceType":"module"}